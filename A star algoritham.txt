class Node:
    def __init__(self, data, level, fval):
        # Initialize the node with data, level of the node, and calculated fvalue
        self.data = data
        self.level = level
        self.fval = fval

    def generate_child(self):
        # Generate child nodes by moving the blank space in the four directions
        x, y = self.find(self.data, '_')
        val_list = [[x, y - 1], [x, y + 1], [x - 1, y], [x + 1, y]]
        children = []
        for i in val_list:
            child = self.shuffle(self.data, x, y, i[0], i[1])
            if child is not None:
                child_node = Node(child, self.level + 1, 0)
                children.append(child_node)
        return children

    def shuffle(self, puz, x1, y1, x2, y2):
        # Move the blank space in the given direction; return None if out of limits
        if 0 <= x2 < len(puz) and 0 <= y2 < len(puz):
            temp_puz = self.copy(puz)
            temp_puz[x2][y2], temp_puz[x1][y1] = temp_puz[x1][y1], temp_puz[x2][y2]
            return temp_puz
        return None

    def copy(self, root):
        # Create a copy of the given node's matrix
        return [row[:] for row in root]

    def find(self, puz, x):
        # Find the position of the blank space
        for i in range(len(puz)):
            for j in range(len(puz)):
                if puz[i][j] == x:
                    return i, j


class Puzzle:
    def __init__(self, size):
        # Initialize puzzle size, open and closed lists
        self.n = size
        self.open = []
        self.closed = []

    def accept(self):
        # Accepts the puzzle from the user
        puz = []
        for _ in range(self.n):
            temp = input().split()
            puz.append(temp)
        return puz

    def f(self, start, goal):
        # Heuristic Function: f(x) = h(x) + g(x)
        return self.h(start.data, goal) + start.level

    def h(self, start, goal):
        # Calculate the number of misplaced tiles (heuristic)
        temp = 0
        for i in range(self.n):
            for j in range(self.n):
                if start[i][j] != goal[i][j] and start[i][j] != '_':
                    temp += 1
        return temp

    def process(self):
        # Accept Start and Goal Puzzle state
        print("Enter the start state matrix:")
        start = self.accept()
        print("Enter the goal state matrix:")
        goal = self.accept()
        
        start_node = Node(start, 0, 0)
        start_node.fval = self.f(start_node, goal)
        self.open.append(start_node)

        print("\n\n")
        while True:
            cur = self.open[0]
            print("")
            print(" | ")
            print(" \\\'/\n")
            for row in cur.data:
                print(" ".join(row))

            # If the difference between current and goal node is 0, we've reached the goal
            if self.h(cur.data, goal) == 0:
                print("Goal reached!")
                break
            
            # Generate children nodes
            for child in cur.generate_child():
                child.fval = self.f(child, goal)
                self.open.append(child)

            # Move current node to closed list
            self.closed.append(cur)
            del self.open[0]

            # Sort the open list based on f value
            self.open.sort(key=lambda x: x.fval)


# Driver code to start the puzzle
if __name__ == "__main__":
    puzzle = Puzzle(3)
    puzzle.process()




OUTPUT:
Enter the start state matrix:
1 2 3
4 _ 6
7 5 8
Enter the goal state matrix:
1 2 3
4 5 6 
7 8 _




 | 
 \'/

1 2 3
4 _ 6
7 5 8

 | 
 \'/

1 2 3
4 5 6
7 _ 8

 | 
 \'/

1 2 3
4 5 6
7 8 _
Goal reached!