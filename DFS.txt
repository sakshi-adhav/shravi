class Graph:
    # Constructor
    def __init__(self, edges, n):
        self.adjList = [[] for _ in range(n)]
        # add edges to the undirected graph
        for (src, dest) in edges:
            self.adjList[src].append(dest)
            self.adjList[dest].append(src)

# Function to perform DFS recursively on the graph
def recursive_DFS(graph, v, discovered):
    discovered[v] = True  # mark the current node as discovered
    print(v, end=' ')     # print the current node
    # do for every edge (v, u)
    for u in graph.adjList[v]:
        if not discovered[u]:  # if `u` is not yet discovered
            recursive_DFS(graph, u, discovered)

if __name__ == '__main__':
    # List of graph edges as per user input
    edges = []
    num_edges = int(input("Enter the number of edges: "))
    for _ in range(num_edges):
        edge = tuple(map(int, input("Enter edge (src dest): ").split()))
        edges.append(edge)

    # total number of nodes in the graph
    n = int(input("Enter value of n: "))
    
    # build a graph from the given edges
    graph = Graph(edges, n)
    
    # to keep track of whether a vertex is discovered or not
    discovered = [False] * n
    
    # Perform DFS traversal from all undiscovered nodes
    print("\nFollowing is Depth First Traversal: ")
    for i in range(n):
        if not discovered[i]:
            recursive_DFS(graph, i, discovered)



OUTPUT:
Enter the number of edges: 8
Enter edge (src dest): 1 2
Enter edge (src dest): 1 3
Enter edge (src dest): 2 4
Enter edge (src dest): 2 5
Enter edge (src dest): 4 6
Enter edge (src dest): 6 7
Enter edge (src dest): 3 5
Enter edge (src dest): 5 6
Enter value of n: 9

Following is Depth First Traversal: 
0 1 2 4 6 7 5 3 8 